// Generated from Pcad.g4 by ANTLR 4.13.0
// jshint ignore: start
let antlr4;
import('antlr4').then(m=>{antlr4=m});


const serializedATN = [4,0,49,310,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,150,8,7,
10,7,12,7,153,9,7,1,7,1,7,1,8,1,8,1,8,3,8,160,8,8,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,1,9,3,9,171,8,9,1,10,1,10,1,10,1,10,3,10,177,8,10,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,190,8,10,1,11,4,11,193,8,
11,11,11,12,11,194,1,12,1,12,3,12,199,8,12,1,12,1,12,1,13,1,13,1,13,5,13,
206,8,13,10,13,12,13,209,9,13,1,14,1,14,1,14,5,14,214,8,14,10,14,12,14,217,
9,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,
46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,5,49,299,8,49,10,49,12,49,302,
9,49,1,50,4,50,305,8,50,11,50,12,50,306,1,50,1,50,1,215,0,51,1,1,3,2,5,3,
7,4,9,5,11,6,13,7,15,8,17,0,19,9,21,10,23,0,25,11,27,12,29,13,31,14,33,15,
35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,
59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,
83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,1,0,6,1,0,39,
39,1,0,48,57,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
97,122,3,0,9,10,13,13,32,32,319,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,19,1,0,0,0,
0,21,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
101,1,0,0,0,1,103,1,0,0,0,3,106,1,0,0,0,5,113,1,0,0,0,7,118,1,0,0,0,9,123,
1,0,0,0,11,132,1,0,0,0,13,142,1,0,0,0,15,147,1,0,0,0,17,159,1,0,0,0,19,170,
1,0,0,0,21,189,1,0,0,0,23,192,1,0,0,0,25,198,1,0,0,0,27,202,1,0,0,0,29,210,
1,0,0,0,31,221,1,0,0,0,33,223,1,0,0,0,35,225,1,0,0,0,37,227,1,0,0,0,39,229,
1,0,0,0,41,231,1,0,0,0,43,233,1,0,0,0,45,235,1,0,0,0,47,237,1,0,0,0,49,239,
1,0,0,0,51,241,1,0,0,0,53,243,1,0,0,0,55,245,1,0,0,0,57,247,1,0,0,0,59,249,
1,0,0,0,61,251,1,0,0,0,63,253,1,0,0,0,65,255,1,0,0,0,67,257,1,0,0,0,69,259,
1,0,0,0,71,261,1,0,0,0,73,263,1,0,0,0,75,265,1,0,0,0,77,267,1,0,0,0,79,269,
1,0,0,0,81,271,1,0,0,0,83,273,1,0,0,0,85,275,1,0,0,0,87,278,1,0,0,0,89,281,
1,0,0,0,91,284,1,0,0,0,93,287,1,0,0,0,95,290,1,0,0,0,97,293,1,0,0,0,99,296,
1,0,0,0,101,304,1,0,0,0,103,104,5,105,0,0,104,105,5,102,0,0,105,2,1,0,0,
0,106,107,5,101,0,0,107,108,5,108,0,0,108,109,5,115,0,0,109,110,5,101,0,
0,110,111,5,105,0,0,111,112,5,102,0,0,112,4,1,0,0,0,113,114,5,101,0,0,114,
115,5,108,0,0,115,116,5,115,0,0,116,117,5,101,0,0,117,6,1,0,0,0,118,119,
5,108,0,0,119,120,5,111,0,0,120,121,5,111,0,0,121,122,5,112,0,0,122,8,1,
0,0,0,123,124,5,102,0,0,124,125,5,117,0,0,125,126,5,110,0,0,126,127,5,99,
0,0,127,128,5,116,0,0,128,129,5,105,0,0,129,130,5,111,0,0,130,131,5,110,
0,0,131,10,1,0,0,0,132,133,5,117,0,0,133,134,5,110,0,0,134,135,5,100,0,0,
135,136,5,101,0,0,136,137,5,102,0,0,137,138,5,105,0,0,138,139,5,110,0,0,
139,140,5,101,0,0,140,141,5,100,0,0,141,12,1,0,0,0,142,143,5,110,0,0,143,
144,5,117,0,0,144,145,5,108,0,0,145,146,5,108,0,0,146,14,1,0,0,0,147,151,
3,31,15,0,148,150,3,17,8,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,
0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,3,31,15,0,155,
16,1,0,0,0,156,157,5,92,0,0,157,160,5,39,0,0,158,160,8,0,0,0,159,156,1,0,
0,0,159,158,1,0,0,0,160,18,1,0,0,0,161,162,5,116,0,0,162,163,5,114,0,0,163,
164,5,117,0,0,164,171,5,101,0,0,165,166,5,102,0,0,166,167,5,97,0,0,167,168,
5,108,0,0,168,169,5,115,0,0,169,171,5,101,0,0,170,161,1,0,0,0,170,165,1,
0,0,0,171,20,1,0,0,0,172,176,3,23,11,0,173,174,3,49,24,0,174,175,3,23,11,
0,175,177,1,0,0,0,176,173,1,0,0,0,176,177,1,0,0,0,177,190,1,0,0,0,178,179,
5,73,0,0,179,180,5,110,0,0,180,181,5,102,0,0,181,182,5,105,0,0,182,183,5,
110,0,0,183,184,5,105,0,0,184,185,5,116,0,0,185,190,5,121,0,0,186,187,5,
78,0,0,187,188,5,97,0,0,188,190,5,78,0,0,189,172,1,0,0,0,189,178,1,0,0,0,
189,186,1,0,0,0,190,22,1,0,0,0,191,193,7,1,0,0,192,191,1,0,0,0,193,194,1,
0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,24,1,0,0,0,196,199,3,27,13,0,197,
199,3,29,14,0,198,196,1,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,201,6,
12,0,0,201,26,1,0,0,0,202,203,3,67,33,0,203,207,3,67,33,0,204,206,8,2,0,
0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,28,
1,0,0,0,209,207,1,0,0,0,210,211,3,67,33,0,211,215,3,65,32,0,212,214,9,0,
0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,0,0,0,216,
218,1,0,0,0,217,215,1,0,0,0,218,219,3,65,32,0,219,220,3,67,33,0,220,30,1,
0,0,0,221,222,5,39,0,0,222,32,1,0,0,0,223,224,5,34,0,0,224,34,1,0,0,0,225,
226,5,96,0,0,226,36,1,0,0,0,227,228,5,40,0,0,228,38,1,0,0,0,229,230,5,41,
0,0,230,40,1,0,0,0,231,232,5,123,0,0,232,42,1,0,0,0,233,234,5,125,0,0,234,
44,1,0,0,0,235,236,5,91,0,0,236,46,1,0,0,0,237,238,5,93,0,0,238,48,1,0,0,
0,239,240,5,46,0,0,240,50,1,0,0,0,241,242,5,44,0,0,242,52,1,0,0,0,243,244,
5,59,0,0,244,54,1,0,0,0,245,246,5,63,0,0,246,56,1,0,0,0,247,248,5,58,0,0,
248,58,1,0,0,0,249,250,5,92,0,0,250,60,1,0,0,0,251,252,5,43,0,0,252,62,1,
0,0,0,253,254,5,45,0,0,254,64,1,0,0,0,255,256,5,42,0,0,256,66,1,0,0,0,257,
258,5,47,0,0,258,68,1,0,0,0,259,260,5,37,0,0,260,70,1,0,0,0,261,262,5,94,
0,0,262,72,1,0,0,0,263,264,5,38,0,0,264,74,1,0,0,0,265,266,5,124,0,0,266,
76,1,0,0,0,267,268,5,33,0,0,268,78,1,0,0,0,269,270,5,60,0,0,270,80,1,0,0,
0,271,272,5,62,0,0,272,82,1,0,0,0,273,274,5,61,0,0,274,84,1,0,0,0,275,276,
5,38,0,0,276,277,5,38,0,0,277,86,1,0,0,0,278,279,5,124,0,0,279,280,5,124,
0,0,280,88,1,0,0,0,281,282,5,94,0,0,282,283,5,94,0,0,283,90,1,0,0,0,284,
285,5,60,0,0,285,286,5,61,0,0,286,92,1,0,0,0,287,288,5,62,0,0,288,289,5,
61,0,0,289,94,1,0,0,0,290,291,5,61,0,0,291,292,5,61,0,0,292,96,1,0,0,0,293,
294,5,33,0,0,294,295,5,61,0,0,295,98,1,0,0,0,296,300,7,3,0,0,297,299,7,4,
0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,
100,1,0,0,0,302,300,1,0,0,0,303,305,7,5,0,0,304,303,1,0,0,0,305,306,1,0,
0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,6,50,0,0,309,
102,1,0,0,0,12,0,151,159,170,176,189,194,198,207,215,300,306,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class PcadLexer extends antlr4.Lexer {

    static grammarFileName = "Pcad.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'if'", "'elseif'", "'else'", "'loop'", "'function'", 
                         "'undefined'", "'null'", null, null, null, null, 
                         null, null, "'''", "'\"'", "'`'", "'('", "')'", 
                         "'{'", "'}'", "'['", "']'", "'.'", "','", "';'", 
                         "'?'", "':'", "'\\'", "'+'", "'-'", "'*'", "'/'", 
                         "'%'", "'^'", "'&'", "'|'", "'!'", "'<'", "'>'", 
                         "'='", "'&&'", "'||'", "'^^'", "'<='", "'>='", 
                         "'=='", "'!='" ];
	static symbolicNames = [ null, "IF", "ELSEIF", "ELSE", "LOOP", "FUNCTION", 
                          "UNDEF", "NULL", "STRING", "BOOLEAN", "NUMBER", 
                          "COMMENT", "LINECOMMENT", "BLOCKCOMMENT", "SQUOTE", 
                          "DQUOTE", "BQUOTE", "LPAREN", "RPAREN", "LBRACE", 
                          "RBRACE", "LBRACK", "RBRACK", "DOT", "COMMA", 
                          "SEMI", "QUERY", "COLON", "BSLASH", "PLUS", "MINUS", 
                          "SPLAT", "SLASH", "PERCENT", "CARET", "AMPER", 
                          "PIPE", "BANG", "LT", "GT", "EQUALS", "DAMP", 
                          "DPIPE", "DCARET", "LTEQ", "GTEQ", "EQ", "NOEQ", 
                          "ID", "WS" ];
	static ruleNames = [ "IF", "ELSEIF", "ELSE", "LOOP", "FUNCTION", "UNDEF", 
                      "NULL", "STRING", "STRINGCHAR", "BOOLEAN", "NUMBER", 
                      "INT", "COMMENT", "LINECOMMENT", "BLOCKCOMMENT", "SQUOTE", 
                      "DQUOTE", "BQUOTE", "LPAREN", "RPAREN", "LBRACE", 
                      "RBRACE", "LBRACK", "RBRACK", "DOT", "COMMA", "SEMI", 
                      "QUERY", "COLON", "BSLASH", "PLUS", "MINUS", "SPLAT", 
                      "SLASH", "PERCENT", "CARET", "AMPER", "PIPE", "BANG", 
                      "LT", "GT", "EQUALS", "DAMP", "DPIPE", "DCARET", "LTEQ", 
                      "GTEQ", "EQ", "NOEQ", "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

PcadLexer.EOF = antlr4.Token.EOF;
PcadLexer.IF = 1;
PcadLexer.ELSEIF = 2;
PcadLexer.ELSE = 3;
PcadLexer.LOOP = 4;
PcadLexer.FUNCTION = 5;
PcadLexer.UNDEF = 6;
PcadLexer.NULL = 7;
PcadLexer.STRING = 8;
PcadLexer.BOOLEAN = 9;
PcadLexer.NUMBER = 10;
PcadLexer.COMMENT = 11;
PcadLexer.LINECOMMENT = 12;
PcadLexer.BLOCKCOMMENT = 13;
PcadLexer.SQUOTE = 14;
PcadLexer.DQUOTE = 15;
PcadLexer.BQUOTE = 16;
PcadLexer.LPAREN = 17;
PcadLexer.RPAREN = 18;
PcadLexer.LBRACE = 19;
PcadLexer.RBRACE = 20;
PcadLexer.LBRACK = 21;
PcadLexer.RBRACK = 22;
PcadLexer.DOT = 23;
PcadLexer.COMMA = 24;
PcadLexer.SEMI = 25;
PcadLexer.QUERY = 26;
PcadLexer.COLON = 27;
PcadLexer.BSLASH = 28;
PcadLexer.PLUS = 29;
PcadLexer.MINUS = 30;
PcadLexer.SPLAT = 31;
PcadLexer.SLASH = 32;
PcadLexer.PERCENT = 33;
PcadLexer.CARET = 34;
PcadLexer.AMPER = 35;
PcadLexer.PIPE = 36;
PcadLexer.BANG = 37;
PcadLexer.LT = 38;
PcadLexer.GT = 39;
PcadLexer.EQUALS = 40;
PcadLexer.DAMP = 41;
PcadLexer.DPIPE = 42;
PcadLexer.DCARET = 43;
PcadLexer.LTEQ = 44;
PcadLexer.GTEQ = 45;
PcadLexer.EQ = 46;
PcadLexer.NOEQ = 47;
PcadLexer.ID = 48;
PcadLexer.WS = 49;



